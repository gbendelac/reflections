What happens when you initialize a repository? Why do you need to do it?

   When a repository is initialized (git init) a file with meta data (named .git) is created to hold git related file information.
   Initially the repository does not track any file (as is evident from the command "git status").
   You need to initialize the repository because git does not automatically creates repositories. 
   The user needs to control when the repository is created and which files in the directory are tracked in it.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

   the staging area is a subset view of the working directory representing files that need to be tracked. Not all files in
   the working directory are necessarily tracked in the repository. The staging area offers a git structure to hold multiple files
   and perform git operations on them as a single unit, e.g. commit operations.

How can you use the staging area to make sure you have one commit per logical
change?

   you can compare the files in the working directory to those in the staging area ("git diff") and commit only those files that have a
   change or changes associated with one logical feature change in the project. You can also undo changes in files in the working directory
   that are not needed anymore or are not related to the new feature represented by the commit using "git reset --hard". Only files added 
   to the commit using "git add filename" will eventually make it into the commit that will be deposited in the repository (with "git commit").

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   if you want to experiment with a new feature while keeping your current project on hold as backup, you create a new branch to make changes.
   in the mean time you know your project as it was working so far is safely kept aside in the repository and you can continue to maintain bugs 
   or changes on that branch while you are experimenting with the files for the new feature.
   
How do the diagrams help you visualize the branch structure?

   it shows the different branches, and for each commit, who the "father commit" is (i.e. the commit it was based on).

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   it incorporates the changes of both branches, usually to create a new master branch. Then the label associated with the temporary branch
   can be deleted.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    sometimes it is impossible to automatically merge two branches of code, especially when these were generated by 2 persons parallelly 
    in time, so the con is it might make serious mistakes if it is done automatically and very difficult to fix. on the other hand when 
    the changes are trivial, it is a pros if the changes are merged automatically.




